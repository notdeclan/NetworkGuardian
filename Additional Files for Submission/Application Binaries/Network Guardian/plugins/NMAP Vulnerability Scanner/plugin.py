import ipaddress

import psutil
from netaddr import IPNetwork

from networkguardian.framework.plugin import AbstractPlugin, executor


# @register_plugin("NMAP Vulnerability Scanner", PluginCategory.ATTACK, "Declan", 1.0)
class NMAPVulnerabilityScanner(AbstractPlugin):

    @staticmethod
    def get_networks():
        networks = {}
        for interface_name, interfaces in psutil.net_if_addrs().items():
            for interface in interfaces:
                try:
                    # Validate Interface / Network
                    assert not ipaddress.ip_address(interface.address).is_loopback  # if loopback
                    assert not ipaddress.ip_address(interface.address).is_link_local  # if  link local
                    assert psutil.net_if_stats()[interface_name].isup  # if disabled (down)
                except (AssertionError, ValueError):  # not valid ip address
                    continue  # goto next one

                ipn = IPNetwork(f"{interface.address}/{interface.netmask}")
                networks[interface_name] = ipn

        return networks

    @executor("template.html")
    def execute(self):
        pass
